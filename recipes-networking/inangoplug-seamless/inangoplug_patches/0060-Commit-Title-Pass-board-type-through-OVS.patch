From 58be97521a5496e2c3304d127d7de0f802e7c55a Mon Sep 17 00:00:00 2001
From: Oleksandr Shaporov <o.shaporov@inango-systems.com>
Date: Thu, 22 Jul 2021 21:48:00 +0300
Subject: [PATCH] Commit Title          : Pass board type through OVS

BugID                 : 24969
Bug Fixed(y/N[blankN]): N
CodeReviewId          : 0
Description           : Added setting hardware id for vswitchd, added n16799_hw_desc changes to current branch
---
 utilities/ovs-ctl.in    | 56 +++++++++++++++++++++++++++++++++++++++++++++++++
 vswitchd/bridge.c       |  7 ++++++-
 vswitchd/bridge.h       |  2 +-
 vswitchd/ovs-vswitchd.c | 16 ++++++++++----
 4 files changed, 75 insertions(+), 6 deletions(-)

diff --git a/utilities/ovs-ctl.in b/utilities/ovs-ctl.in
index 1e84a8ae8..d75527830 100644
--- a/utilities/ovs-ctl.in
+++ b/utilities/ovs-ctl.in
@@ -211,6 +211,7 @@ do_start_forwarding () {
         # Start ovs-vswitchd.
         set ovs-vswitchd unix:"$DB_SOCK"
         set "$@" -vconsole:emer -vsyslog:err -vfile:info
+        set "$@" --hw="${OVS_HARDWARE_ID}"
         if test X"$MLOCKALL" != Xno; then
             set "$@" --mlockall
         fi
@@ -357,6 +358,59 @@ enable_protocol () {
 ## main ##
 ## ---- ##
 
+set_hardware_id () {
+    PLATFORM=""
+    ARCHITECTURE=`lscpu | grep "Architecture" | cut -d ':' -f 2 | sed -e 's/^[[:space:]]*//'`
+    ENDIANNESS=`lscpu | grep "Byte Order" | cut -d ':' -f 2 | sed -e 's/^[[:space:]]*//'`
+    CHIP=`lscpu | grep "Model name" | cut -d ':' -f 2 | sed -e 's/^[[:space:]]*//' | cut -d ' ' -f 4`
+    RAM=`free | grep "Mem:" | cut -d ':' -f 2 | sed -e 's/^[[:space:]]*//' | cut -d ' ' -f 1`
+    WIFI="w+"
+    SDK=`grep "SDK_VERSION" /version.txt | sed -e 's/SDK_VERSION=//'`
+    MODE="DOCSIS/Ethernet"
+
+    local BOX_TYPE=`grep "BOX_TYPE" /etc/device.properties | sed -e 's/BOX_TYPE=//'`
+    local MODEL_NUM=`grep "MODEL_NUM" /etc/device.properties | sed -e 's/MODEL_NUM=//'`
+
+    case "${BOX_TYPE}" in
+
+     "PUMA7_CGP")
+        PLATFORM="Puma7_CGP"
+        ;;
+
+     "XB6")
+        if [ "${MODEL_NUM}" = "INTEL_PUMA" ]; then
+            PLATFORM="Puma7_CGR"
+        elif [ "${MODEL_NUM}" = "TG4482A" ]; then
+            PLATFORM="Puma7_XB7"
+        elif [ "${MODEL_NUM}" = "TG3482G" ]; then
+            PLATFORM="Puma7_XB6"
+        else
+            PLATFORM="Puma7_${MODEL_NUM}"
+        fi
+        ;;
+
+      *)
+        PLATFORM="${BOX_TYPE}_${MODEL_NUM}"
+        ;;
+    esac
+
+    if [ "${RAM}" -le 256000 ]; then
+        RAM="256M"
+    elif [ "${RAM}" -le 512000 ]; then
+        RAM="512M"
+    else
+        RAM="1G"
+    fi
+
+    if [ "${ENDIANNESS}" = "Little Endian" ]; then
+        ENDIANNESS="le"
+    else
+        ENDIANNESS="be"
+    fi
+
+    OVS_HARDWARE_ID="${PLATFORM}_${ARCHITECTURE}_${ENDIANNESS}_${CHIP}_${RAM}_${WIFI}_${SDK}_${MODE}"
+}
+
 set_defaults () {
     SYSTEM_ID=
 
@@ -417,6 +471,8 @@ set_defaults () {
     if ! test -e /nvram/openvswitch.conf; then
         echo 'OPTIONS="--ovs-bridges=*,!a-mux"' > /nvram/openvswitch.conf
     fi
+    
+    set_hardware_id
 }
 
 usage () {
diff --git a/vswitchd/bridge.c b/vswitchd/bridge.c
index aed6c8264..10e27b81e 100644
--- a/vswitchd/bridge.c
+++ b/vswitchd/bridge.c
@@ -366,6 +366,8 @@ static void bridge_configure_port_protection(struct bridge *br);
 
 static void discover_types(const struct ovsrec_open_vswitch *cfg);
 
+static char *g_hw_desc = NULL; //pointer to the string with hardware description
+
 static void
 bridge_init_ofproto(const struct ovsrec_open_vswitch *cfg)
 {
@@ -435,8 +437,9 @@ if_notifier_changed(struct if_notifier *notifier OVS_UNUSED)
  * from an OVSDB server accessed over 'remote', which should be a string in a
  * form acceptable to ovsdb_idl_create(). */
 void
-bridge_init(const char *remote)
+bridge_init(const char *remote, char *hw_desc)
 {
+    g_hw_desc = hw_desc;
     /* Create connection to database. */
     idl = ovsdb_idl_create(remote, &ovsrec_idl_class, true, true);
     idl_seqno = ovsdb_idl_get_seqno(idl);
@@ -891,6 +894,8 @@ bridge_reconfigure(const struct ovsrec_open_vswitch *ovs_cfg)
             } else {
                 /* Trigger storing datapath version. */
                 seq_change(connectivity_seq_get());
+                if (g_hw_desc)
+                    br->ofproto->hw_desc = xstrdup(g_hw_desc);
             }
         }
     }
diff --git a/vswitchd/bridge.h b/vswitchd/bridge.h
index 8b2fce451..9ae72c156 100644
--- a/vswitchd/bridge.h
+++ b/vswitchd/bridge.h
@@ -20,7 +20,7 @@
 
 struct simap;
 
-void bridge_init(const char *remote);
+void bridge_init(const char *remote, char *hw_desc);
 void bridge_exit(bool delete_datapath);
 
 void bridge_run(void);
diff --git a/vswitchd/ovs-vswitchd.c b/vswitchd/ovs-vswitchd.c
index 1e72b628b..f15a75b83 100644
--- a/vswitchd/ovs-vswitchd.c
+++ b/vswitchd/ovs-vswitchd.c
@@ -61,7 +61,7 @@ static bool want_mlockall;
 
 static unixctl_cb_func ovs_vswitchd_exit;
 
-static char *parse_options(int argc, char *argv[], char **unixctl_path);
+static char *parse_options(int argc, char *argv[], char **unixctl_path, char **hw);
 OVS_NO_RETURN static void usage(void);
 
 struct ovs_vswitchd_exit_args {
@@ -75,6 +75,7 @@ main(int argc, char *argv[])
     char *unixctl_path = NULL;
     struct unixctl_server *unixctl;
     char *remote;
+    char *hw = NULL;
     bool exiting, cleanup;
     struct ovs_vswitchd_exit_args exit_args = {&exiting, &cleanup};
     int retval;
@@ -85,7 +86,7 @@ main(int argc, char *argv[])
     dns_resolve_init(true);
     ovs_cmdl_proctitle_init(argc, argv);
     service_start(&argc, &argv);
-    remote = parse_options(argc, argv, &unixctl_path);
+    remote = parse_options(argc, argv, &unixctl_path, &hw);
     fatal_ignore_sigpipe();
 
     daemonize_start(true);
@@ -109,7 +110,7 @@ main(int argc, char *argv[])
     unixctl_command_register("exit", "[--cleanup]", 0, 1,
                              ovs_vswitchd_exit, &exit_args);
 
-    bridge_init(remote);
+    bridge_init(remote, hw);
     free(remote);
 
     exiting = false;
@@ -151,7 +152,7 @@ main(int argc, char *argv[])
 }
 
 static char *
-parse_options(int argc, char *argv[], char **unixctl_pathp)
+parse_options(int argc, char *argv[], char **unixctl_pathp, char **hw)
 {
     enum {
         OPT_PEER_CA_CERT = UCHAR_MAX + 1,
@@ -166,6 +167,7 @@ parse_options(int argc, char *argv[], char **unixctl_pathp)
         OPT_DPDK,
         SSL_OPTION_ENUMS,
         OPT_DUMMY_NUMA,
+        HW_DESC,
     };
     static const struct option long_options[] = {
         {"help",        no_argument, NULL, 'h'},
@@ -182,6 +184,7 @@ parse_options(int argc, char *argv[], char **unixctl_pathp)
         {"disable-system-route", no_argument, NULL, OPT_DISABLE_SYSTEM_ROUTE},
         {"dpdk", optional_argument, NULL, OPT_DPDK},
         {"dummy-numa", required_argument, NULL, OPT_DUMMY_NUMA},
+        {"hw",  required_argument, NULL, HW_DESC},
         {NULL, 0, NULL, 0},
     };
     char *short_options = ovs_cmdl_long_options_to_short_options(long_options);
@@ -246,6 +249,10 @@ parse_options(int argc, char *argv[], char **unixctl_pathp)
             ovs_numa_set_dummy(optarg);
             break;
 
+        case HW_DESC:
+            *hw = optarg;
+            break;
+
         default:
             abort();
         }
@@ -285,6 +292,7 @@ usage(void)
           );
     printf("\nOther options:\n"
            "  --unixctl=SOCKET          override default control socket name\n"
+           "  --hw=STRING               set hardware description\n"
            "  -h, --help                display this help message\n"
            "  -V, --version             display version information\n");
     exit(EXIT_SUCCESS);
