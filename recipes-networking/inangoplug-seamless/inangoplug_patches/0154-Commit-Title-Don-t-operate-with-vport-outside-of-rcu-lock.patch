From f1c08437ea901b39a0f88a71b7b4f7397dc52ddd Mon Sep 17 00:00:00 2001
From: Anton Bilohai <a.bilohai@inango-systems.com>
Date: Fri, 17 Jun 2022 12:41:23 +0300
Subject: [PATCH] Commit Title: Don't operate with vport outside of rcu lock

BugID: 27194
Bug Fixed(y/N[blankN]): y
CodeReviewId: 0
Description:
    - We use vport outside of rcu_lock during NEW/DEL NEIGH notification
    of Linux. This potentially can cause NULL pointer if vport will
    vanish after end of rcu_lock
    - Limit all interaction with vport inside rcu_lock and store data
    required from vport in separate vars for later use
    - Remove ifdef HAVE_GENL_VALIDATE_FLAGS from NEW/DEL NEIGH
    notifications declarations, as MACs can't be validated STRICT-ly
---
 datapath/datapath.c | 46 +++++++++++++++++++++++++++++-----------------
 1 file changed, 29 insertions(+), 17 deletions(-)

diff --git a/datapath/datapath.c b/datapath/datapath.c
index dd27499ae..c60d10ac3 100644
--- a/datapath/datapath.c
+++ b/datapath/datapath.c
@@ -2082,22 +2082,28 @@ static int ovs_vport_cmd_newneigh(struct sk_buff *skbn, struct genl_info *info)
     u8 mac_addr[ETH_ALEN];
     int err;
     struct vport *input_vport;
+    int if_index;
 
     if (a[OVS_VPORT_ATTR_MAC]) {
         struct nlattr *mac_attr = a[OVS_VPORT_ATTR_MAC];
         memcpy(mac_addr, nla_data(mac_attr), nla_len(mac_attr));
     } else {
-          goto error;
+        return -EBADMSG;
     }
     net = sock_net(skbn->sk);
 
     rcu_read_lock();
-    input_vport = lookup_vport(net, ovs_header, info->attrs);
-    rcu_read_unlock();
-
+    input_vport = lookup_vport(net, ovs_header, a);
     err = PTR_ERR(input_vport);
     if (IS_ERR(input_vport))
-        return err;
+        goto error;
+    if (input_vport->dev)
+        if_index = input_vport->dev->ifindex;
+    else {
+        err = -ENETDOWN;
+        goto error;
+    }
+    rcu_read_unlock();
 
     skb = nlmsg_new(rtnl_fdb_nlmsg_size(), GFP_ATOMIC);
     nlh = nlmsg_put(skb, 0, 0,  RTM_NEWNEIGH, sizeof(*ndm), 0);
@@ -2108,7 +2114,7 @@ static int ovs_vport_cmd_newneigh(struct sk_buff *skbn, struct genl_info *info)
     ndm->ndm_pad2    = 0;
     ndm->ndm_flags   = NTF_SELF;
     ndm->ndm_type    = 0;
-    ndm->ndm_ifindex = input_vport->dev->ifindex;
+    ndm->ndm_ifindex = if_index;
     ndm->ndm_state   = NUD_REACHABLE;
 
     if (nla_put(skb, NDA_LLADDR, ETH_ALEN, &mac_addr))
@@ -2116,16 +2122,16 @@ static int ovs_vport_cmd_newneigh(struct sk_buff *skbn, struct genl_info *info)
 
     nlmsg_end(skb, nlh);
     rtnl_notify(skb, net, 0, RTNLGRP_NEIGH, NULL, GFP_ATOMIC);
-    dev_put(input_vport->dev);
 
     return 0;
 
 nla_put_failure:
     nlmsg_cancel(skb, nlh);
+    return -EMSGSIZE;
 
 error:
-    dev_put(input_vport->dev);
-    return -EMSGSIZE;
+    rcu_read_unlock();
+    return err;
 }
 
 static int ovs_vport_cmd_delneigh(struct sk_buff *skbn, struct genl_info *info)
@@ -2139,22 +2145,28 @@ static int ovs_vport_cmd_delneigh(struct sk_buff *skbn, struct genl_info *info)
     u8 mac_addr[ETH_ALEN];
     int err;
     struct vport *input_vport;
+    int if_index;
 
     if (a[OVS_VPORT_ATTR_MAC]) {
         struct nlattr *mac_attr = a[OVS_VPORT_ATTR_MAC];
         memcpy(mac_addr, nla_data(mac_attr), nla_len(mac_attr));
     } else {
-          goto error;
+        return -EBADMSG;
     }
     net = sock_net(skbn->sk);
 
     rcu_read_lock();
     input_vport = lookup_vport(net, ovs_header, a);
-    rcu_read_unlock();
-
     err = PTR_ERR(input_vport);
     if (IS_ERR(input_vport))
-        return err;
+        goto error;
+    if (input_vport->dev)
+        if_index = input_vport->dev->ifindex;
+    else {
+        err = -ENETDOWN;
+        goto error;
+    }
+    rcu_read_unlock();
 
     skb = nlmsg_new(rtnl_fdb_nlmsg_size(), GFP_ATOMIC);
     nlh = nlmsg_put(skb, 0, 0,  RTM_DELNEIGH, sizeof(*ndm), 0);
@@ -2165,7 +2177,7 @@ static int ovs_vport_cmd_delneigh(struct sk_buff *skbn, struct genl_info *info)
     ndm->ndm_pad2    = 0;
     ndm->ndm_flags   = NTF_SELF;
     ndm->ndm_type    = 0;
-    ndm->ndm_ifindex = input_vport->dev->ifindex;
+    ndm->ndm_ifindex = if_index;
     ndm->ndm_state   = NUD_FAILED;
 
     if (nla_put(skb, NDA_LLADDR, ETH_ALEN, &mac_addr))
@@ -2173,16 +2185,16 @@ static int ovs_vport_cmd_delneigh(struct sk_buff *skbn, struct genl_info *info)
 
     nlmsg_end(skb, nlh);
     rtnl_notify(skb, net, 0, RTNLGRP_NEIGH, NULL, GFP_ATOMIC);
-    dev_put(input_vport->dev);
 
     return 0;
 
 nla_put_failure:
     nlmsg_cancel(skb, nlh);
+    return -EMSGSIZE;
 
 error:
-    dev_put(input_vport->dev);
-    return -EMSGSIZE;
+    rcu_read_unlock();
+    return err;
 }
 
 static int ovs_vport_cmd_mcast_fill_msg(struct vport* vport, struct genl_info *info,
