From 586b8b294212abf27e780378af9ed5441f0eb030 Mon Sep 17 00:00:00 2001
From: Anton Bilohai <a.bilohai@inango-systems.com>
Date: Tue, 26 Apr 2022 22:04:51 +0300
Subject: [PATCH] Commit Title: Use Datapath ID instead of Linux ID during RTNL
 notification

BugID: 27194
Bug Fixed(y/N[blankN]): n
CodeReviewId: 0
Description:
    - Usage of Linux indexes in userspace-kernelspace communication
    inside of OVS is not common. Usually, OVS or Datapath indexes are
    used.
    - Use OVS Datapath indexes during process of Linux notification
    about new/del neighbors (RTNL_NEIGH)
---
 datapath/datapath.c          | 57 ++++++++++++++++++++++++++++----------------
 lib/dpif-netlink.c           | 12 +++++-----
 lib/dpif-netlink.h           |  4 ++--
 lib/mac-learning.c           |  2 +-
 lib/mac-learning.h           |  2 +-
 ofproto/ofproto-dpif-xlate.c |  6 ++---
 6 files changed, 50 insertions(+), 33 deletions(-)

diff --git a/datapath/datapath.c b/datapath/datapath.c
index 1611f6ad9..72bcfb40d 100644
--- a/datapath/datapath.c
+++ b/datapath/datapath.c
@@ -2077,7 +2077,9 @@ static int ovs_vport_cmd_newneigh(struct sk_buff *skbn, struct genl_info *info)
     struct net *net;
     struct net_device *dev;
     struct ovs_header *ovs_header = info->userhdr;
-    int ifindex = ovs_header->dp_ifindex;
+
+    struct vport *input_vport;
+    struct datapatn *dp;
     u8 mac_addr[ETH_ALEN];
 
     if (a[OVS_VPORT_ATTR_MAC]) {
@@ -2086,6 +2088,15 @@ static int ovs_vport_cmd_newneigh(struct sk_buff *skbn, struct genl_info *info)
     } else {
           goto error;
     }
+// LOCK RCU
+// Obtain ifindex from
+	rcu_read_lock();
+	dp = get_dp_rcu(sock_net(skbn->sk), ovs_header->dp_ifindex);
+	input_vport = ovs_vport_rcu(dp, ovs_header->dp_ifindex);
+	rcu_read_unlock();
+// FREE RCU LOCK
+    printk(KERN_ERR "OVS: NEW_NEIGH dp_port: %d, if_index: %d (%s)\n",
+            ovs_header->dp_ifindex, input_vport->dev->ifindex, input_vport->dev->name);
 
     skb = nlmsg_new(rtnl_fdb_nlmsg_size(), GFP_ATOMIC);
     nlh = nlmsg_put(skb, 0, 0,  RTM_NEWNEIGH, sizeof(*ndm), 0);
@@ -2096,27 +2107,24 @@ static int ovs_vport_cmd_newneigh(struct sk_buff *skbn, struct genl_info *info)
     ndm->ndm_pad2    = 0;
     ndm->ndm_flags   = NTF_SELF;
     ndm->ndm_type    = 0;
-    ndm->ndm_ifindex = ifindex;
+    ndm->ndm_ifindex = input_vport->dev->ifindex;
     ndm->ndm_state   = NUD_REACHABLE;
 
-    dev = dev_get_by_index(&init_net, ifindex);
-
-    if (dev == NULL)
-	    return -ENODEV;
-
     if (nla_put(skb, NDA_LLADDR, ETH_ALEN, &mac_addr))
         goto nla_put_failure;
 
     nlmsg_end(skb, nlh);
-    net = dev_net(dev);
+    net = dev_net(input_vport->dev);
     rtnl_notify(skb, net, 0, RTNLGRP_NEIGH, NULL, GFP_ATOMIC);
-	dev_put(dev);
+	dev_put(input_vport->dev);
+
     return 0;
 
 nla_put_failure:
     nlmsg_cancel(skb, nlh);
-	dev_put(dev);
+
 error:
+	dev_put(input_vport->dev);
     return -EMSGSIZE;
 }
 
@@ -2132,6 +2140,9 @@ static int ovs_vport_cmd_delneigh(struct sk_buff *skbn, struct genl_info *info)
     int ifindex = ovs_header->dp_ifindex;
     u8 mac_addr[ETH_ALEN];
 
+    struct vport *input_vport;
+    struct datapatn *dp;
+
     if (a[OVS_VPORT_ATTR_MAC]) {
         struct nlattr *mac_attr = a[OVS_VPORT_ATTR_MAC];
         memcpy(mac_addr, nla_data(mac_attr), nla_len(mac_attr));
@@ -2139,6 +2150,16 @@ static int ovs_vport_cmd_delneigh(struct sk_buff *skbn, struct genl_info *info)
           goto error;
     }
 
+// LOCK RCU
+// Obtain ifindex from
+	rcu_read_lock();
+	dp = get_dp_rcu(sock_net(skbn->sk), ovs_header->dp_ifindex);
+	input_vport = ovs_vport_rcu(dp, ovs_header->dp_ifindex);
+	rcu_read_unlock();
+// FREE RCU LOCK
+    printk(KERN_ERR "OVS: DEL_NEIGH dp_port: %d, if_index: %d (%s)\n",
+            ovs_header->dp_ifindex, input_vport->dev->ifindex, input_vport->dev->name);
+
     skb = nlmsg_new(rtnl_fdb_nlmsg_size(), GFP_ATOMIC);
     nlh = nlmsg_put(skb, 0, 0,  RTM_DELNEIGH, sizeof(*ndm), 0);
 
@@ -2148,28 +2169,24 @@ static int ovs_vport_cmd_delneigh(struct sk_buff *skbn, struct genl_info *info)
     ndm->ndm_pad2    = 0;
     ndm->ndm_flags   = NTF_SELF;
     ndm->ndm_type    = 0;
-    ndm->ndm_ifindex = ifindex;
+    ndm->ndm_ifindex = input_vport->dev->ifindex;
     ndm->ndm_state   = NUD_FAILED;
 
-    dev = dev_get_by_index(&init_net, ifindex);
-
-    if (dev == NULL)
-	    return -ENODEV;
-
     if (nla_put(skb, NDA_LLADDR, ETH_ALEN, &mac_addr))
         goto nla_put_failure;
 
     nlmsg_end(skb, nlh);
-    net = dev_net(dev);
+    net = dev_net(input_vport->dev);
     rtnl_notify(skb, net, 0, RTNLGRP_NEIGH, NULL, GFP_ATOMIC);
-	dev_put(dev);
+	dev_put(input_vport->dev);
 
     return 0;
 
 nla_put_failure:
     nlmsg_cancel(skb, nlh);
-	dev_put(dev);
+
 error:
+	dev_put(input_vport->dev);
     return -EMSGSIZE;
 }
 
@@ -3221,7 +3238,7 @@ static int __init dp_init(void)
 
 	err = dp_register_genl();
 	if (err < 0)
-		goto error_unreg_netdev;	
+		goto error_unreg_netdev;
 
 	pp_am_set_am_id_by_ufid_callback(notify_am_id);
 
diff --git a/lib/dpif-netlink.c b/lib/dpif-netlink.c
index a9003245d..f47633525 100644
--- a/lib/dpif-netlink.c
+++ b/lib/dpif-netlink.c
@@ -4314,13 +4314,13 @@ dpif_netlink_vport_get(const char *name, struct dpif_netlink_vport *reply,
 }
 
 static int
-dpif_netlink_mac_send(int ifindex, const struct eth_addr src_mac, uint8_t cmd)
+dpif_netlink_mac_send(odp_port_t odp_index, const struct eth_addr src_mac, uint8_t cmd)
 {
     struct dpif_netlink_vport request;
 
     dpif_netlink_vport_init(&request);
     request.cmd = cmd;
-    request.dp_ifindex = ifindex;
+    request.dp_ifindex = odp_index;
 
     memcpy(request.ea, src_mac.ea, sizeof(src_mac.ea));
 
@@ -4328,11 +4328,11 @@ dpif_netlink_mac_send(int ifindex, const struct eth_addr src_mac, uint8_t cmd)
 }
 
 int
-dpif_netlink_rtm_newneigh(int ifindex, const struct eth_addr src_mac)
+dpif_netlink_rtm_newneigh(odp_port_t odp_index, const struct eth_addr src_mac)
 {
     int error;
 
-    error = dpif_netlink_mac_send(ifindex, src_mac, OVS_VPORT_CMD_NEWNEIGH);
+    error = dpif_netlink_mac_send(odp_index, src_mac, OVS_VPORT_CMD_NEWNEIGH);
 
     if (!error) {
         return -1;
@@ -4342,11 +4342,11 @@ dpif_netlink_rtm_newneigh(int ifindex, const struct eth_addr src_mac)
 }
 
 int
-dpif_netlink_rtm_delneigh(int ifindex, const struct eth_addr src_mac)
+dpif_netlink_rtm_delneigh(odp_port_t odp_index, const struct eth_addr src_mac)
 {
     int error;
 
-    error = dpif_netlink_mac_send(ifindex, src_mac, OVS_VPORT_CMD_DELNEIGH);
+    error = dpif_netlink_mac_send(odp_index, src_mac, OVS_VPORT_CMD_DELNEIGH);
 
     if (!error) {
         return -1;
diff --git a/lib/dpif-netlink.h b/lib/dpif-netlink.h
index adeb58b7d..140b01ddb 100644
--- a/lib/dpif-netlink.h
+++ b/lib/dpif-netlink.h
@@ -63,8 +63,8 @@ int dpif_netlink_vport_transact(const struct dpif_netlink_vport *request,
 int dpif_netlink_vport_get(const char *name, struct dpif_netlink_vport *reply,
                            struct ofpbuf **bufp);
 
-int dpif_netlink_rtm_newneigh(int ifindex, const struct eth_addr src_mac);
-int dpif_netlink_rtm_delneigh(int ifindex, const struct eth_addr src_mac);
+int dpif_netlink_rtm_newneigh(odp_port_t odp_index, const struct eth_addr src_mac);
+int dpif_netlink_rtm_delneigh(odp_port_t odp_index, const struct eth_addr src_mac);
 
 int dpif_netlink_rtm_add_mcast_grp(const void *dpif_, int port_no, const struct in6_addr *addr, uint16_t vlan, const struct eth_addr *mac);
 int dpif_netlink_rtm_del_mcast_grp(const void *dpif_, int port_no, struct in6_addr *addr, uint16_t vlan, const struct eth_addr *mac);
diff --git a/lib/mac-learning.c b/lib/mac-learning.c
index 6f6891529..bd0b6f325 100644
--- a/lib/mac-learning.c
+++ b/lib/mac-learning.c
@@ -513,7 +513,7 @@ mac_learning_expire(struct mac_learning *ml, struct mac_entry *e)
 {
     ml->need_revalidate = true;
     mac_entry_set_port(ml, e, NULL);
-    dpif_netlink_rtm_delneigh(ml->ifindex, e->mac);
+    dpif_netlink_rtm_delneigh(ml->odp_index, e->mac);
     hmap_remove(&ml->table, &e->hmap_node);
     ovs_list_remove(&e->lru_node);
     free(e);
diff --git a/lib/mac-learning.h b/lib/mac-learning.h
index c1050f047..55bd9dddb 100644
--- a/lib/mac-learning.h
+++ b/lib/mac-learning.h
@@ -159,7 +159,7 @@ struct mac_learning {
     struct ovs_refcount ref_cnt;
     struct ovs_rwlock rwlock;
     bool need_revalidate;
-    int ifindex;
+    odp_port_t odp_index;
 
     /* Statistics */
     uint64_t total_learned;
diff --git a/ofproto/ofproto-dpif-xlate.c b/ofproto/ofproto-dpif-xlate.c
index 900d49e6d..fca0823b9 100644
--- a/ofproto/ofproto-dpif-xlate.c
+++ b/ofproto/ofproto-dpif-xlate.c
@@ -2579,8 +2579,8 @@ update_learning_table__(const struct xbridge *xbridge,
     xport = CONTAINER_OF(ovs_list_front(&in_xbundle->xports), struct xport,
                              bundle_node);
 
-    netdev = xport->netdev;
-    xbridge->ml->ifindex = netdev_get_ifindex(netdev);
+    if (xport->odp_port != ODPP_NONE)
+        xbridge->ml->odp_index = xport->odp_port;
 
     return (in_xbundle == &ofpp_none_bundle
             || !mac_learning_update(xbridge->ml, dl_src, vlan,
@@ -2599,7 +2599,7 @@ update_learning_table(const struct xlate_ctx *ctx,
         xlate_report_debug(ctx, OFT_DETAIL, "learned that "ETH_ADDR_FMT" is "
                            "on port %s in VLAN %d",
                            ETH_ADDR_ARGS(dl_src), in_xbundle->name, vlan);
-        dpif_netlink_rtm_newneigh(ctx->xbridge->ml->ifindex, dl_src);
+        dpif_netlink_rtm_newneigh(ctx->xbridge->ml->odp_index, dl_src);
     }
 }
 
