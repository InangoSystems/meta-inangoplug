From 45005d00201e13d819bee70da512f39b06aa31ab Mon Sep 17 00:00:00 2001
From: Anton Bilohai <a.bilohai@inango-systems.com>
Date: Tue, 24 May 2022 19:26:10 +0300
Subject: [PATCH] Commit Title: Move odp_index to port_no when notifies
 Datapath

BugID: 27194
Bug Fixed(y/N[blankN]): n
CodeReviewId: 0
Description:
    - Currently, odp_index is placed as "dp_index" in struct which send
    to Datapath. But this struct has port_no field specific for such
    values.
    - Move odp_index to place where it belongs in struct
---
 datapath/datapath.c          | 30 ++++++++++++++++--------------
 lib/dpif-netlink.c           | 21 +++++++++++----------
 lib/dpif-netlink.h           |  4 ++--
 lib/mac-learning.c           |  2 +-
 lib/mac-learning.h           |  1 +
 ofproto/ofproto-dpif-xlate.c |  7 +++++--
 6 files changed, 36 insertions(+), 29 deletions(-)

diff --git a/datapath/datapath.c b/datapath/datapath.c
index 060fed608..3cc04f153 100644
--- a/datapath/datapath.c
+++ b/datapath/datapath.c
@@ -2075,12 +2075,12 @@ static int ovs_vport_cmd_newneigh(struct sk_buff *skbn, struct genl_info *info)
     struct ndmsg *ndm;
     struct sk_buff *skb;
     struct net *net;
-    struct net_device *dev;
     struct ovs_header *ovs_header = info->userhdr;
+    u32 port_no;
+    u8 mac_addr[ETH_ALEN];
 
     struct vport *input_vport;
-    struct datapatn *dp;
-    u8 mac_addr[ETH_ALEN];
+    struct datapath *dp;
 
     if (a[OVS_VPORT_ATTR_MAC]) {
         struct nlattr *mac_attr = a[OVS_VPORT_ATTR_MAC];
@@ -2089,22 +2089,20 @@ static int ovs_vport_cmd_newneigh(struct sk_buff *skbn, struct genl_info *info)
           goto error;
     }
 
-    printk(KERN_ERR "OVS: obtaining port_no\n");
 	port_no = a[OVS_VPORT_ATTR_PORT_NO]
 		? nla_get_u32(a[OVS_VPORT_ATTR_PORT_NO]) : 0;
 	if (port_no >= DP_MAX_PORTS)
 		return -EFBIG;
 
-    printk(KERN_ERR "OVS: locking RCU\n");
 // LOCK RCU
 // Obtain ifindex from
 	rcu_read_lock();
 	dp = get_dp_rcu(sock_net(skbn->sk), ovs_header->dp_ifindex);
-	input_vport = ovs_vport_rcu(dp, ovs_header->dp_ifindex);
+	input_vport = ovs_vport_rcu(dp, port_no);
 	rcu_read_unlock();
 // FREE RCU LOCK
-    printk(KERN_ERR "OVS: NEW_NEIGH dp_port: %d, if_index: %d (%s)\n",
-            ovs_header->dp_ifindex, input_vport->dev->ifindex, input_vport->dev->name);
+    printk(KERN_ERR "OVS: NEW_NEIGH port_no: %d, dp_ifindex: %d, if_index: %d (%s)\n",
+            port_no, ovs_header->dp_ifindex, input_vport->dev->ifindex, input_vport->dev->name);
 
     skb = nlmsg_new(rtnl_fdb_nlmsg_size(), GFP_ATOMIC);
     nlh = nlmsg_put(skb, 0, 0,  RTM_NEWNEIGH, sizeof(*ndm), 0);
@@ -2143,13 +2141,12 @@ static int ovs_vport_cmd_delneigh(struct sk_buff *skbn, struct genl_info *info)
     struct ndmsg *ndm;
     struct sk_buff *skb;
     struct net *net;
-    struct net_device *dev;
     struct ovs_header *ovs_header = info->userhdr;
-    int ifindex = ovs_header->dp_ifindex;
+    u32 port_no;
     u8 mac_addr[ETH_ALEN];
 
     struct vport *input_vport;
-    struct datapatn *dp;
+    struct datapath *dp;
 
     if (a[OVS_VPORT_ATTR_MAC]) {
         struct nlattr *mac_attr = a[OVS_VPORT_ATTR_MAC];
@@ -2158,15 +2155,20 @@ static int ovs_vport_cmd_delneigh(struct sk_buff *skbn, struct genl_info *info)
           goto error;
     }
 
+	port_no = a[OVS_VPORT_ATTR_PORT_NO]
+		? nla_get_u32(a[OVS_VPORT_ATTR_PORT_NO]) : 0;
+	if (port_no >= DP_MAX_PORTS)
+		return -EFBIG;
+
 // LOCK RCU
 // Obtain ifindex from
 	rcu_read_lock();
 	dp = get_dp_rcu(sock_net(skbn->sk), ovs_header->dp_ifindex);
-	input_vport = ovs_vport_rcu(dp, ovs_header->dp_ifindex);
+	input_vport = ovs_vport_rcu(dp, port_no);
 	rcu_read_unlock();
 // FREE RCU LOCK
-    printk(KERN_ERR "OVS: DEL_NEIGH dp_port: %d, if_index: %d (%s)\n",
-            ovs_header->dp_ifindex, input_vport->dev->ifindex, input_vport->dev->name);
+    printk(KERN_ERR "OVS: DEL_NEIGH port_no: %d, dp_ifindex: %d, if_index: %d (%s)\n",
+            port_no, ovs_header->dp_ifindex, input_vport->dev->ifindex, input_vport->dev->name);
 
     skb = nlmsg_new(rtnl_fdb_nlmsg_size(), GFP_ATOMIC);
     nlh = nlmsg_put(skb, 0, 0,  RTM_DELNEIGH, sizeof(*ndm), 0);
diff --git a/lib/dpif-netlink.c b/lib/dpif-netlink.c
index e0717fedd..f23f602b1 100644
--- a/lib/dpif-netlink.c
+++ b/lib/dpif-netlink.c
@@ -4314,13 +4314,14 @@ dpif_netlink_vport_get(const char *name, struct dpif_netlink_vport *reply,
 }
 
 static int
-dpif_netlink_mac_send(odp_port_t odp_index, const struct eth_addr src_mac, uint8_t cmd)
+dpif_netlink_mac_send(odp_port_t odp_index, int dp_ifindex, const struct eth_addr src_mac, uint8_t cmd)
 {
     struct dpif_netlink_vport request;
 
     dpif_netlink_vport_init(&request);
     request.cmd = cmd;
-    request.dp_ifindex = odp_index;
+    request.port_no = odp_index;
+    request.dp_ifindex = dp_ifindex;
 
     memcpy(request.ea, src_mac.ea, sizeof(src_mac.ea));
 
@@ -4328,13 +4329,13 @@ dpif_netlink_mac_send(odp_port_t odp_index, const struct eth_addr src_mac, uint8
 }
 
 int
-dpif_netlink_rtm_newneigh(odp_port_t odp_index, const struct eth_addr src_mac)
+dpif_netlink_rtm_newneigh(odp_port_t odp_index, int dp_ifindex, const struct eth_addr src_mac)
 {
     int error;
 
-    VLOG_ERR("Sending NEWNEIGH odp: %u, MAC:%02x:%02x:%02x:%02x:%02x:%02x \n",
-            odp_index, src_mac.ea[0], src_mac.ea[1],src_mac.ea[2],src_mac.ea[3],src_mac.ea[4],src_mac.ea[5]);
-    error = dpif_netlink_mac_send(odp_index, src_mac, OVS_VPORT_CMD_NEWNEIGH);
+    VLOG_WARN("Sending NEWNEIGH odp: %u, dp_ifindex: %d,MAC:%02x:%02x:%02x:%02x:%02x:%02x \n",
+            odp_index, dp_ifindex, src_mac.ea[0], src_mac.ea[1],src_mac.ea[2],src_mac.ea[3],src_mac.ea[4],src_mac.ea[5]);
+    error = dpif_netlink_mac_send(odp_index, dp_ifindex, src_mac, OVS_VPORT_CMD_NEWNEIGH);
 
     if (!error) {
         return -1;
@@ -4344,13 +4345,13 @@ dpif_netlink_rtm_newneigh(odp_port_t odp_index, const struct eth_addr src_mac)
 }
 
 int
-dpif_netlink_rtm_delneigh(odp_port_t odp_index, const struct eth_addr src_mac)
+dpif_netlink_rtm_delneigh(odp_port_t odp_index, int dp_ifindex, const struct eth_addr src_mac)
 {
     int error;
 
-    VLOG_ERR("Sending DELNEIGH odp: %u, MAC:%02x:%02x:%02x:%02x:%02x:%02x \n",
-            odp_index, src_mac.ea[0], src_mac.ea[1],src_mac.ea[2],src_mac.ea[3],src_mac.ea[4],src_mac.ea[5]);
-    error = dpif_netlink_mac_send(odp_index, src_mac, OVS_VPORT_CMD_DELNEIGH);
+    VLOG_WARN("Sending DELNEIGH odp: %u, dp_ifindex: %d, MAC:%02x:%02x:%02x:%02x:%02x:%02x \n",
+            odp_index, dp_ifindex, src_mac.ea[0], src_mac.ea[1],src_mac.ea[2],src_mac.ea[3],src_mac.ea[4],src_mac.ea[5]);
+    error = dpif_netlink_mac_send(odp_index, dp_ifindex, src_mac, OVS_VPORT_CMD_DELNEIGH);
 
     if (!error) {
         return -1;
diff --git a/lib/dpif-netlink.h b/lib/dpif-netlink.h
index 140b01ddb..cf2164fcb 100644
--- a/lib/dpif-netlink.h
+++ b/lib/dpif-netlink.h
@@ -63,8 +63,8 @@ int dpif_netlink_vport_transact(const struct dpif_netlink_vport *request,
 int dpif_netlink_vport_get(const char *name, struct dpif_netlink_vport *reply,
                            struct ofpbuf **bufp);
 
-int dpif_netlink_rtm_newneigh(odp_port_t odp_index, const struct eth_addr src_mac);
-int dpif_netlink_rtm_delneigh(odp_port_t odp_index, const struct eth_addr src_mac);
+int dpif_netlink_rtm_newneigh(odp_port_t odp_index, int dp_ifindex, const struct eth_addr src_mac);
+int dpif_netlink_rtm_delneigh(odp_port_t odp_index, int dp_ifindex, const struct eth_addr src_mac);
 
 int dpif_netlink_rtm_add_mcast_grp(const void *dpif_, int port_no, const struct in6_addr *addr, uint16_t vlan, const struct eth_addr *mac);
 int dpif_netlink_rtm_del_mcast_grp(const void *dpif_, int port_no, struct in6_addr *addr, uint16_t vlan, const struct eth_addr *mac);
diff --git a/lib/mac-learning.c b/lib/mac-learning.c
index bd0b6f325..e4630d26a 100644
--- a/lib/mac-learning.c
+++ b/lib/mac-learning.c
@@ -512,8 +512,8 @@ void
 mac_learning_expire(struct mac_learning *ml, struct mac_entry *e)
 {
     ml->need_revalidate = true;
+    dpif_netlink_rtm_delneigh(ml->odp_index, ml->dp_ifindex, e->mac);
     mac_entry_set_port(ml, e, NULL);
-    dpif_netlink_rtm_delneigh(ml->odp_index, e->mac);
     hmap_remove(&ml->table, &e->hmap_node);
     ovs_list_remove(&e->lru_node);
     free(e);
diff --git a/lib/mac-learning.h b/lib/mac-learning.h
index 55bd9dddb..82a31b4c4 100644
--- a/lib/mac-learning.h
+++ b/lib/mac-learning.h
@@ -160,6 +160,7 @@ struct mac_learning {
     struct ovs_rwlock rwlock;
     bool need_revalidate;
     odp_port_t odp_index;
+    int dp_ifindex;
 
     /* Statistics */
     uint64_t total_learned;
diff --git a/ofproto/ofproto-dpif-xlate.c b/ofproto/ofproto-dpif-xlate.c
index fca0823b9..349c04f2a 100644
--- a/ofproto/ofproto-dpif-xlate.c
+++ b/ofproto/ofproto-dpif-xlate.c
@@ -2574,11 +2574,13 @@ update_learning_table__(const struct xbridge *xbridge,
                         struct xbundle *in_xbundle, struct eth_addr dl_src,
                         int vlan, bool is_grat_arp)
 {
-    struct netdev *netdev;
     struct xport *xport;
+    struct dpif_netlink dpif_nl;
     xport = CONTAINER_OF(ovs_list_front(&in_xbundle->xports), struct xport,
                              bundle_node);
 
+    &dpif_nl = dpif_netlink_cast(xbridge->dpif);
+    xbridge->ml->dp_ifindex = dpif_nl->dp_ifindex;
     if (xport->odp_port != ODPP_NONE)
         xbridge->ml->odp_index = xport->odp_port;
 
@@ -2594,12 +2596,13 @@ update_learning_table(const struct xlate_ctx *ctx,
                       struct xbundle *in_xbundle, struct eth_addr dl_src,
                       int vlan, bool is_grat_arp)
 {
+
     if (!update_learning_table__(ctx->xbridge, in_xbundle, dl_src, vlan,
                                  is_grat_arp)) {
         xlate_report_debug(ctx, OFT_DETAIL, "learned that "ETH_ADDR_FMT" is "
                            "on port %s in VLAN %d",
                            ETH_ADDR_ARGS(dl_src), in_xbundle->name, vlan);
-        dpif_netlink_rtm_newneigh(ctx->xbridge->ml->odp_index, dl_src);
+        dpif_netlink_rtm_newneigh(ctx->xbridge->ml->odp_index, ctx->xbridge->ml->dp_ifindex, dl_src);
     }
 }
 
