From e7856b59b722e832bc88915c397b0c033e3c9d0f Mon Sep 17 00:00:00 2001
From: Vadim Galeev <v.galeev@inango-systems.com>
Date: Mon, 30 May 2022 11:49:21 +0000
Subject: [PATCH] Ported openvswitch changes from kernel-4.9 to kernel-5.15

BugID: 28894
---
 datapath/linux/compat/include/linux/openvswitch.h |  3 ++-
 lib/dpif-netlink.c                                | 22 +++++++++++++++++-----
 lib/dpif-netlink.h                                |  1 +
 lib/netdev-linux.c                                | 13 +++++++++++++
 lib/netdev-provider.h                             |  1 +
 lib/netdev.c                                      | 10 ++++++++++
 lib/netdev.h                                      |  1 +
 vswitchd/bridge.c                                 | 10 ++++++++++
 8 files changed, 55 insertions(+), 6 deletions(-)

diff --git a/datapath/linux/compat/include/linux/openvswitch.h b/datapath/linux/compat/include/linux/openvswitch.h
index 29fd19672..8e1fd59a7 100644
--- a/datapath/linux/compat/include/linux/openvswitch.h
+++ b/datapath/linux/compat/include/linux/openvswitch.h
@@ -241,7 +241,8 @@ enum ovs_vport_cmd {
 	OVS_VPORT_CMD_ADDMCASTGRP,
 	OVS_VPORT_CMD_DELMCASTGRP,
 	OVS_VPORT_CMD_SET_FLAGS,
-	OVS_VPORT_CMD_DEL_FLAGS
+	OVS_VPORT_CMD_DEL_FLAGS,
+	OVS_VPORT_CMD_SET_CARRIER
 };
 
 enum ovs_vport_type {
diff --git a/lib/dpif-netlink.c b/lib/dpif-netlink.c
index 89ae752c8..254c11b62 100644
--- a/lib/dpif-netlink.c
+++ b/lib/dpif-netlink.c
@@ -4083,12 +4083,20 @@ dpif_netlink_vport_set_flags(const char *name, uint32_t flags) {
     request.name = name;
     request.flags = flags;
 
-    error = dpif_netlink_vport_transact(&request, NULL, NULL);
-    if (!error) {
-        return -1;
-    }
+    return dpif_netlink_vport_transact(&request, NULL, NULL);
+}
 
-    return 0;
+int
+dpif_netlink_vport_set_carrier(const char *name, bool carrier) {
+    struct dpif_netlink_vport request;
+    int error;
+
+    dpif_netlink_vport_init(&request);
+    request.cmd = OVS_VPORT_CMD_SET_CARRIER;
+    request.name = name;
+    request.flags = carrier;
+
+    return dpif_netlink_vport_transact(&request, NULL, NULL);
 }
 
 /* Parses the contents of 'buf', which contains a "struct ovs_header" followed
@@ -4222,6 +4230,10 @@ dpif_netlink_vport_to_ofpbuf(const struct dpif_netlink_vport *vport,
     if (vport->cmd == OVS_VPORT_CMD_SET_FLAGS || vport->cmd == OVS_VPORT_CMD_DEL_FLAGS) {
         nl_msg_put_u32(buf, OVS_VPORT_ATTR_FLAGS, vport->flags);
     }
+
+    if (vport->cmd == OVS_VPORT_CMD_SET_CARRIER) {
+        nl_msg_put_u32(buf, OVS_VPORT_ATTR_FLAGS, vport->flags);
+    }
 }
 
 /* Clears 'vport' to "empty" values. */
diff --git a/lib/dpif-netlink.h b/lib/dpif-netlink.h
index 009290c89..adeb58b7d 100644
--- a/lib/dpif-netlink.h
+++ b/lib/dpif-netlink.h
@@ -72,6 +72,7 @@ int dpif_netlink_rtm_del_mcast_grp(const void *dpif_, int port_no, struct in6_ad
 bool dpif_netlink_is_internal_device(const char *name);
 
 int dpif_netlink_vport_set_flags(const char *name, uint32_t flags);
+int dpif_netlink_vport_set_carrier(const char *name, bool carrier);
 
 enum ovs_vport_type netdev_to_ovs_vport_type(const char *type);
 
diff --git a/lib/netdev-linux.c b/lib/netdev-linux.c
index c6f3d2740..a41baf751 100644
--- a/lib/netdev-linux.c
+++ b/lib/netdev-linux.c
@@ -1946,6 +1946,18 @@ netdev_linux_get_carrier(const struct netdev *netdev_, bool *carrier)
     return 0;
 }
 
+static int
+netdev_linux_set_carrier(const struct netdev *netdev_, bool carrier)
+{
+    struct netdev_linux *netdev = netdev_linux_cast(netdev_);
+
+    ovs_mutex_lock(&netdev->mutex);
+    dpif_netlink_vport_set_carrier(netdev_->name, carrier);
+    ovs_mutex_unlock(&netdev->mutex);
+
+    return 0;
+}
+
 static long long int
 netdev_linux_get_carrier_resets(const struct netdev *netdev_)
 {
@@ -3513,6 +3525,7 @@ exit:
     .set_mtu = netdev_linux_set_mtu,                            \
     .get_ifindex = netdev_linux_get_ifindex,                    \
     .get_carrier = netdev_linux_get_carrier,                    \
+    .set_carrier = netdev_linux_set_carrier,                    \
     .get_carrier_resets = netdev_linux_get_carrier_resets,      \
     .set_miimon_interval = netdev_linux_set_miimon_interval,    \
     .set_advertisements = netdev_linux_set_advertisements,      \
diff --git a/lib/netdev-provider.h b/lib/netdev-provider.h
index 22f4cde33..e8961a1c5 100644
--- a/lib/netdev-provider.h
+++ b/lib/netdev-provider.h
@@ -446,6 +446,7 @@ struct netdev_class {
      * up as long as device is up).
      */
     int (*get_carrier)(const struct netdev *netdev, bool *carrier);
+    int (*set_carrier)(const struct netdev *netdev, bool carrier);
 
     /* Returns the number of times 'netdev''s carrier has changed since being
      * initialized.
diff --git a/lib/netdev.c b/lib/netdev.c
index 407037ed8..dab206811 100644
--- a/lib/netdev.c
+++ b/lib/netdev.c
@@ -1546,6 +1546,16 @@ netdev_get_carrier(const struct netdev *netdev)
     return carrier;
 }
 
+int
+netdev_set_carrier(const struct netdev *netdev, bool carrier)
+{
+    if (!netdev->netdev_class->set_carrier) {
+        return EOPNOTSUPP;
+    }
+
+    return netdev->netdev_class->set_carrier(netdev, carrier);
+}
+
 /* Returns the number of times 'netdev''s carrier has changed. */
 long long int
 netdev_get_carrier_resets(const struct netdev *netdev)
diff --git a/lib/netdev.h b/lib/netdev.h
index fdbe0e1f5..99259845b 100644
--- a/lib/netdev.h
+++ b/lib/netdev.h
@@ -230,6 +230,7 @@ int netdev_get_etheraddr(const struct netdev *, struct eth_addr *mac);
 /* PHY interface. */
 bool netdev_get_carrier(const struct netdev *);
 long long int netdev_get_carrier_resets(const struct netdev *);
+int netdev_set_carrier(const struct netdev *, bool carrier);
 int netdev_set_miimon_interval(struct netdev *, long long int interval);
 
 /* Flags. */
diff --git a/vswitchd/bridge.c b/vswitchd/bridge.c
index 14ee6ea5e..672823ac1 100644
--- a/vswitchd/bridge.c
+++ b/vswitchd/bridge.c
@@ -3191,6 +3191,8 @@ run_status_update(void)
             dpdk_status(cfg);
             HMAP_FOR_EACH (br, node, &all_bridges) {
                 struct port *port;
+                bool br_carrier = 0;
+                struct iface *br_iface = NULL;
 
                 br_refresh_stp_status(br);
                 br_refresh_rstp_status(br);
@@ -3204,8 +3206,16 @@ run_status_update(void)
                     LIST_FOR_EACH (iface, port_elem, &port->ifaces) {
                         iface_refresh_netdev_status(iface);
                         iface_refresh_ofproto_status(iface);
+                        if (iface->ofp_port != OFPP_LOCAL) {
+                            br_carrier |= netdev_get_carrier(iface->netdev);
+                        } else {
+                            br_iface = iface;
+                        }
                     }
                 }
+                if (br_iface) {
+                    netdev_set_carrier(br_iface->netdev, br_carrier);
+                }
             }
         }
     }
