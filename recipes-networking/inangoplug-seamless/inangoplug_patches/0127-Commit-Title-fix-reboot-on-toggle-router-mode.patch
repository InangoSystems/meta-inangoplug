From cd9061e6d5cdf925c07b7d26efc01250d0b18157 Mon Sep 17 00:00:00 2001
From: Georgii Okhokhonin <g.okhokhonin@inango-systems.com>
Date: Sat, 5 Mar 2022 18:34:03 +0500
Subject: [PATCH] Commit Title: fix reboot on toggle router mode

BugID: 27562
Bug Fixed(y/N[blankN]):
CodeReviewId: 0
Description: add syncronisation primitives to avoid network device
destruction while used. add missing ovs_lock/unlock calls.
---
 datapath/brcompat_main.c | 25 +++++++++++++++---
 datapath/datapath.c      | 66 ++++++++++++++++++++++++++++--------------------
 datapath/dp_sysfs_if.c   | 12 +++++++--
 3 files changed, 69 insertions(+), 34 deletions(-)

diff --git a/datapath/brcompat_main.c b/datapath/brcompat_main.c
index 91473113b..7859b2194 100644
--- a/datapath/brcompat_main.c
+++ b/datapath/brcompat_main.c
@@ -587,6 +587,7 @@ static int brc_get_fdb_entries(struct net_device *dev, void *buf,
 	    nla_put_u64_64bit(request, BRC_GENL_A_FDB_SKIP, offset, BRC_GENL_A_PAD))
 		goto nla_put_failure;
 
+	dev_hold(dev);
 	rtnl_unlock();
 	reply = brc_send_command(dev_net(dev), request, attrs);
 	retval = PTR_ERR(reply);
@@ -617,6 +618,7 @@ exit_free_skb:
 	kfree_skb(reply);
 exit:
 	rtnl_lock();
+	dev_put(dev);
 	return retval;
 
 nla_put_failure:
@@ -1140,6 +1142,7 @@ static int brc_br_port_setup(struct vport *br_vport, struct vport *vport, int ad
 static int brc_br_changelink(struct vport *vport, struct nlattr *tb[], struct nlattr *data[])
 {
 	void *brcompat_data;
+	struct net_device *dev;
 
 	if (!vport || !data)
 		return 0;
@@ -1155,7 +1158,15 @@ static int brc_br_changelink(struct vport *vport, struct nlattr *tb[], struct nl
 	if (data[IFLA_BR_MCAST_SNOOPING]) {
 		u8 val = nla_get_u8(data[IFLA_BR_MCAST_SNOOPING]);
 
-		brc_set_ulong_val_cmd(vport->dev, BRC_GENL_C_SET_BRIDGE_MULTICAST_SNOOPING, val);
+		dev = vport->dev;
+		dev_hold(dev);
+		brc_set_ulong_val_cmd(dev, BRC_GENL_C_SET_BRIDGE_MULTICAST_SNOOPING, val);
+
+		if (unlikely((dev->priv_flags & IFF_OVS_DATAPATH) == 0)) {
+			dev_put(dev);
+			return -ENODEV;
+		}
+		dev_put(dev);
 
 		br_compat_multicast_toggle(brcompat_data, val);
 	}
@@ -1221,18 +1232,24 @@ static int brc_br_port_set_param(struct vport *vport, struct net_device *dev, st
 	if (!vport || !dev || !data)
 		return 0;
 
+	dev_hold(dev);
 	if (data[IFLA_BRPORT_FAST_LEAVE]) {
 		val = nla_get_u8(data[IFLA_BRPORT_FAST_LEAVE]);
 
 		err = brc_set_ulong_val_cmd(dev, BRC_GENL_C_SET_PORT_MC_SNOOPING_FLOOD_REPORTS, !val);
 		if (err)
-			return err;
+			goto err;
+
+		if (unlikely((dev->priv_flags & IFF_OVS_DATAPATH) == 0)) {
+			err = -ENODEV;
+			goto err;
+		}
 
 		err = br_compat_set_port_flag(vport->brcompat_data, val, BR_MULTICAST_FAST_LEAVE);
-		if (err)
-			return err;
 	}
 
+err:
+	dev_put(dev);
 	return err;
 }
 
diff --git a/datapath/datapath.c b/datapath/datapath.c
index ef3beb264..4b3b77eb7 100644
--- a/datapath/datapath.c
+++ b/datapath/datapath.c
@@ -2096,6 +2096,9 @@ static int ovs_vport_cmd_newneigh(struct sk_buff *skbn, struct genl_info *info)
 
     dev = dev_get_by_index(&init_net, ifindex);
 
+    if (dev == NULL)
+	    return -ENODEV;
+
     if (nla_put(skb, NDA_LLADDR, ETH_ALEN, &mac_addr))
         goto nla_put_failure;
 
@@ -2107,9 +2110,8 @@ static int ovs_vport_cmd_newneigh(struct sk_buff *skbn, struct genl_info *info)
 
 nla_put_failure:
     nlmsg_cancel(skb, nlh);
-
-error:
 	dev_put(dev);
+error:
     return -EMSGSIZE;
 }
 
@@ -2146,6 +2148,9 @@ static int ovs_vport_cmd_delneigh(struct sk_buff *skbn, struct genl_info *info)
 
     dev = dev_get_by_index(&init_net, ifindex);
 
+    if (dev == NULL)
+	    return -ENODEV;
+
     if (nla_put(skb, NDA_LLADDR, ETH_ALEN, &mac_addr))
         goto nla_put_failure;
 
@@ -2158,9 +2163,8 @@ static int ovs_vport_cmd_delneigh(struct sk_buff *skbn, struct genl_info *info)
 
 nla_put_failure:
     nlmsg_cancel(skb, nlh);
-
-error:
 	dev_put(dev);
+error:
     return -EMSGSIZE;
 }
 
@@ -2207,8 +2211,8 @@ static int ovs_vport_cmd_mcast_fill_msg(struct vport* vport, struct genl_info *i
 
 static int ovs_vport_cmd_addmcastgrp(struct sk_buff *skb, struct genl_info *info)
 {
-    struct pp_am_multicast_event_msg msg;
-    int err;
+	struct pp_am_multicast_event_msg msg;
+	int err = -1;
 	struct vport *vport;
 	void *br_mport = NULL;
 	void *mport = NULL;
@@ -2216,15 +2220,14 @@ static int ovs_vport_cmd_addmcastgrp(struct sk_buff *skb, struct genl_info *info
 	struct br_ip group;
 	unsigned char mac[ETH_ALEN];
 
+	ovs_lock();
 	vport = lookup_vport(sock_net(skb->sk), info->userhdr, a);
-	if (vport == NULL){
-		return -1;
-	}
+	if (vport == NULL)
+		goto err;
 
-    err = ovs_vport_cmd_mcast_fill_msg(vport, info, &msg, &group, mac);
-    if (err) {
-        return err;
-    }
+	err = ovs_vport_cmd_mcast_fill_msg(vport, info, &msg, &group, mac);
+	if (err)
+		goto err;
 
 	if (vport->type == OVS_VPORT_TYPE_INTERNAL) {
 		br_mport = vport->brcompat_data;
@@ -2233,13 +2236,16 @@ static int ovs_vport_cmd_addmcastgrp(struct sk_buff *skb, struct genl_info *info
 	}
 
 	pp_am_port_event(PP_AM_MULTICAST_JOIN, &msg);
-	return br_compat_multicast_add_group(br_mport, mport, &group, mac);
+	err = br_compat_multicast_add_group(br_mport, mport, &group, mac);
+err:
+	ovs_unlock();
+	return err;
 }
 
 static int ovs_vport_cmd_delmcastgrp(struct sk_buff *skb, struct genl_info *info)
 {
-    struct pp_am_multicast_event_msg msg;
-    int err;
+	struct pp_am_multicast_event_msg msg;
+	int err = -1;
 	struct vport *vport;
 	void *br_mport;
 	void *mport;
@@ -2247,15 +2253,14 @@ static int ovs_vport_cmd_delmcastgrp(struct sk_buff *skb, struct genl_info *info
 	struct br_ip group;
 	unsigned char mac[ETH_ALEN];
 
+	ovs_lock();
 	vport = lookup_vport(sock_net(skb->sk), info->userhdr, a);
-	if (vport == NULL){
-		return -1;
-	}
+	if (vport == NULL)
+		goto err;
 
-    err = ovs_vport_cmd_mcast_fill_msg(vport, info, &msg, &group, mac);
-    if (err) {
-        return err;
-    }
+	err = ovs_vport_cmd_mcast_fill_msg(vport, info, &msg, &group, mac);
+	if (err)
+		goto err;
 
 	if (vport->type == OVS_VPORT_TYPE_INTERNAL) {
 		br_mport = vport->brcompat_data;
@@ -2264,25 +2269,23 @@ static int ovs_vport_cmd_delmcastgrp(struct sk_buff *skb, struct genl_info *info
 	}
 
 	pp_am_port_event(PP_AM_MULTICAST_LEAVE, &msg);
-	br_compat_multicast_leave_group(br_mport, mport, &group, mac);
+	err = br_compat_multicast_leave_group(br_mport, mport, &group, mac);
+err:
+	ovs_unlock();
 	return err;
 }
 
 uint32_t set_vport_flags(struct vport *vport, uint32_t flags) {
 	uint32_t old_flags;
-	ovs_lock();
 	old_flags = vport->flags;
 	vport->flags |= flags;
-	ovs_unlock();
 	return old_flags;
 }
 
 uint32_t del_vport_flags(struct vport *vport, uint32_t flags) {
 	uint32_t old_flags;
-	ovs_lock();
 	old_flags = vport->flags;
 	vport->flags &= ~flags;
-	ovs_unlock();
 	return old_flags;
 }
 
@@ -2292,8 +2295,11 @@ static int ovs_vport_cmd_set_flags(struct sk_buff *skb, struct genl_info *info)
 	struct nlattr **a = info->attrs;
 	uint32_t flags;
 
+	ovs_lock();
+
 	vport = lookup_vport(sock_net(skb->sk), info->userhdr, a);
 	if (vport == NULL){
+		ovs_unlock();
 		return -1;
 	}
 
@@ -2304,6 +2310,7 @@ static int ovs_vport_cmd_set_flags(struct sk_buff *skb, struct genl_info *info)
 	}
 
 	set_vport_flags(vport, flags);
+	ovs_unlock();
 
 	return 0;
 }
@@ -2314,8 +2321,10 @@ static int ovs_vport_cmd_del_flags(struct sk_buff *skb, struct genl_info *info)
 	struct nlattr **a = info->attrs;
 	uint32_t flags;
 
+	ovs_lock();
 	vport = lookup_vport(sock_net(skb->sk), info->userhdr, a);
 	if (vport == NULL){
+		ovs_unlock();
 		return -1;
 	}
 
@@ -2326,6 +2335,7 @@ static int ovs_vport_cmd_del_flags(struct sk_buff *skb, struct genl_info *info)
 	}
 
 	del_vport_flags(vport, flags);
+	ovs_unlock();
 
 	return 0;
 }
diff --git a/datapath/dp_sysfs_if.c b/datapath/dp_sysfs_if.c
index fdb7e7118..d0ff30477 100644
--- a/datapath/dp_sysfs_if.c
+++ b/datapath/dp_sysfs_if.c
@@ -177,8 +177,16 @@ static ssize_t show_fastleave(struct vport *p, char *buf)
 static ssize_t store_fastleave(struct vport *p, unsigned long v)
 {
 	unsigned long val = !v;
-	ovs_dp_sysfs_hook(p->dev, &val, BRC_GENL_C_SET_PORT_MC_SNOOPING_FLOOD_REPORTS, SET_PARAMETER);
-	br_compat_set_port_flag(p->brcompat_data, !!v, BR_MULTICAST_FAST_LEAVE);
+	struct net_device *dev = p->dev;
+
+	dev_hold(dev);
+	ovs_dp_sysfs_hook(dev, &val, BRC_GENL_C_SET_PORT_MC_SNOOPING_FLOOD_REPORTS, SET_PARAMETER);
+
+	if (likely(dev->priv_flags & IFF_OVS_DATAPATH)) {
+		br_compat_set_port_flag(p->brcompat_data, !!v, BR_MULTICAST_FAST_LEAVE);
+	}
+	dev_put(dev);
+
 	return 0;
 }
 static BRPORT_ATTR(fastleave, S_IRUGO | S_IWUSR, show_fastleave, store_fastleave);
